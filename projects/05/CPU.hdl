// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
        // decode control bits from instruction
        // A instruction - most significant bit is 0
        Not(in=instruction[15], out=isA);
        // C instruction - most significant bit is 1
        And(a=true, b=instruction[15], out=isC);

        // load from data or address
        And(a=instruction[12], b=true, out=loadFromAddr);

        // ALU input bits setting
        Mux(a=false, b=instruction[11], sel=isC, out=zx);
        Mux(a=false, b=instruction[10], sel=isC, out=nx);
        Mux(a=false, b=instruction[9], sel=isC, out=zy);
        Mux(a=false, b=instruction[8], sel=isC, out=ny);
        Mux(a=false, b=instruction[7], sel=isC, out=f);
        Mux(a=false, b=instruction[6], sel=isC, out=no);

        // Destination output setting
        And(a=isC, b=instruction[5], out=storeInA);
        And(a=isC, b=instruction[4], out=storeInD);
        And(a=isC, b=instruction[3], out=writeM);

        // if it's A instruction or storeInA is true, stores the value in the A-register
        Mux16(a=aluOut, b=instruction, sel=isA, out=firstMuxOut);
        Or(a=isA, b=storeInA, out=loadA);
        ARegister (in=firstMuxOut, load=loadA, out=aRegOut, out[0..14]=addressM);

        Mux16(a=aRegOut, b=inM, sel=loadFromAddr, out=secondMuxOut);

        // if the storeInD is true, store the value in the D-register
        DRegister (in=aluOut, load=storeInD, out=dRegOut);
        ALU(x=dRegOut, y=secondMuxOut, zx=zx, nx=nx, zy=zy, ny=ny, f=f, no=no, out=aluOut, zr=zr, ng=ng);

        Mux16(a=false, b=aluOut, sel=true, out=outM);

        // determine jump or not based on the output zr, ng and jump instruction
        // jump bits setting
        // 0  0  0         no jump
        // 0  0  1   JGT   jump if pos
        // 0  1  0   JEQ   jump if zr
        // 0  1  1   JGE   jump if zr or pos
        // 1  0  0   JLT   jump if ng
        // 1  0  1   JNE   jump if ng or pos
        // 1  1  0   JLE   jump if ng or zr
        // 1  1  1   JMP   jump if ng or zr or pos

        Not(in=true, out=nojmp);
        And(a=zr, b=true, out=jeq);
        And(a=ng, b=true, out=jlt);
        Or(a=ng, b=zr, out=jle);
        Not(in=jle, out=jgt);
        Or(a=zr, b=jgt, out=jge);
        Or(a=ng, b=jgt, out=jne);
        Or(a=jeq, b=jne, out=jmp);

        Mux8Way(a=nojmp, b=jgt, c=jeq, d=jge, e=jlt, f=jne, g=jle, h=jmp, j0=instruction[0], j1=instruction[1], j2=instruction[2], out=mayJump);
        And(a=mayJump, b=isC, out=shouldJump);
        // program counter 
        PC(in=aRegOut, load=shouldJump, inc=true, reset=reset, out[0..14]=pc);
        
}