// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl

/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load==1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications given in the book.
 */

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
       // select output pin based on the address
       //     0 - 000 0000 0000 0000 - address[14..15] = 00
       // 16383 - 011 1111 1111 1111 - address[14..15] = 01
       // 16384 - 100 0000 0000 0000 - address[14..15] = 10
       // 24575 - 101 1111 1111 1111 - address[14..15] = 10
       // 24576 - 110 0000 0000 0000 - address[14..15] = 11
       // 24577 - 110 0000 0000 0001 - address[14..15] = 11

       // address[13..14] == 00 or 01 => RAM
       // address[13..14] == 10 => screen
       // address[13..14] == 11 => keyboard or invalid

        // need to determine which part get the load == 1
        DMux4Way(in=load, sel=address[13..14], a=loadRAM1, b=loadRAM2, c=loadScreen, d=loadKeyboard);
       
        Or(a=loadRAM1, b=loadRAM2, out=loadRAM);

        // RAM16k address 14 bits
        RAM16K(in=in, load=loadRAM, address=address[0..13], out=ramOut);
        
        // screen address 13 bits
        Screen(in=in, load=loadScreen, address=address[0..12], out=screenOut);
       
        Keyboard(out=keyboardOut);

        // select output based on address[13..14]
        Mux4Way16(a=ramOut, b=ramOut, c=screenOut, d=keyboardOut, sel=address[13..14], out=out);

}